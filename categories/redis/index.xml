<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>redis - Category - ZhengPengDe Blog</title>
        <link>https://847850277.github.io/categories/redis/</link>
        <description>redis - Category - ZhengPengDe Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 27 Nov 2021 09:00:00 &#43;0000</lastBuildDate><atom:link href="https://847850277.github.io/categories/redis/" rel="self" type="application/rss+xml" /><item>
    <title>redis使用分布式锁记</title>
    <link>https://847850277.github.io/posts/redis/redis-distributed-lock-use/</link>
    <pubDate>Sat, 27 Nov 2021 09:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/redis/redis-distributed-lock-use/</guid>
    <description><![CDATA[使用redis分布式锁记 背景介绍 在项目中使用封装的redis锁注解中，会出现异常信息。抛出拿分布式锁异常。
跟源码 其中lock对象为false的情况下会抛出Get redis lock failed的业务异常 @Around(&#34;redisLockPoint() &amp;&amp; @annotation(redisLock)&#34;) public Object around(ProceedingJoinPoint pjp, RedisLock redisLock) throws Throwable { String key = redisLock.key(); if (StringUtils.isBlank(key)) { Object[] args = pjp.getArgs(); if (redisLock.bindType().equals(RedisLock.BindType.DEFAULT)) { key = StringUtils.join(args); } else if (redisLock.bindType().equals(RedisLock.BindType.ARGS_INDEX)) { key = getArgsKey(redisLock, args); } else if (redisLock.bindType().equals(RedisLock.BindType.OBJECT_PROPERTIES)) { key = getObjectPropertiesKey(redisLock, args); } } Assert.hasText(key, &#34;key does not exist&#34;); String prefix = redisLock.prefix()+&#34;_&#34;; boolean lock = distributedRedisLock.lock(prefix + key, redisLock.]]></description>
</item>
</channel>
</rss>
