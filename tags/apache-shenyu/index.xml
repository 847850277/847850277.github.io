<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>apache shenyu - Tag - ZhengPengDe Blog</title>
        <link>https://847850277.github.io/tags/apache-shenyu/</link>
        <description>apache shenyu - Tag - ZhengPengDe Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 16 Jun 2023 09:00:00 &#43;0000</lastBuildDate><atom:link href="https://847850277.github.io/tags/apache-shenyu/" rel="self" type="application/rss+xml" /><item>
    <title>apache shenyu的spi机制</title>
    <link>https://847850277.github.io/posts/apache-shenyu/shenyu-spi/</link>
    <pubDate>Fri, 16 Jun 2023 09:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/apache-shenyu/shenyu-spi/</guid>
    <description><![CDATA[什么是spi SPI就是Service Provider Interface,是一种动态的服务发现机制。 可以基于运行时动态的加载接口的实现类。通过(接口编程 + 策略模式 + 配置文件) 实现解耦和扩展。
应用 数据库驱动 基于该接口的实现有MySQL,PostgreSQL,SqlServer等。 SLF4J日志框架 Dubbo的SPI扩展 dubbo apache shenyu spring boot starter jdbc的应用 日志的应用 apache shenyu的spi应用 dubbo的spi应用 实现方式 市面上常见的SPI的实现方式有：
JDK的SPI实现 Dubbo的SPI实现、ShenYu的 SPI Spring的SPI实现 JDK的SPI实现流程为
在类路径的META-INF/services目录创建一个以接口全限定名称命名的文件（本质是一个properties）文件，例如命名为java.sql.Driver 该文件中可以指定具体的实现类，也就是每个实现类的全类型限定名为单独一行 例如 META-INF/services/java.sql.Driver # META-INF/services/java.sql.Driver文件内容 com.mysql.jdbc.Driver org.postgresql.Driver 最后通过java.util.ServiceLoader对该文件进行加载，实例化接口的对应实现类（这里隐含了一个约定，所有实现类必须提供无参构造函数,用来反射调用） 底层的实现涉及到类加载、双亲委派等内容，这里不展开。基于这种设计思路，很多主流框架实现了一套SPI扩展，例如Dubbo的SPI扩展模块，就是读取类路径 下META-INF/services/dubbo目录的文件内容进行类加载。ShenYu-SPI模块也是沿用类似的设计思路。
JDK SPI 的代码示例 接口定义 public interface Search { public List&lt;String&gt; searchDoc(String keyword); } 实现类 public class FileSearch implements Search{ @Override public List&lt;String&gt; searchDoc(String keyword) { System.out.println(&#34;文件搜索 &#34;+keyword); return null; } } public class DatabaseSearch implements Search{ @Override public List&lt;String&gt; searchDoc(String keyword) { System.]]></description>
</item>
<item>
    <title>apache shenyu 打包命令集</title>
    <link>https://847850277.github.io/posts/apache-shenyu/shenyu-maven-package/</link>
    <pubDate>Tue, 06 Jun 2023 16:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/apache-shenyu/shenyu-maven-package/</guid>
    <description><![CDATA[打包常用的命令 # example打包 ./mvnw -B clean install -Pexample -DskipTests -f ./shenyu-examples/shenyu-examples-springcloud/pom.xml ./mvnw -B clean install -Pexample -DskipTests -f ./shenyu-examples/shenyu-examples-dubbo/pom.xml ./mvnw -B clean install -Pexample -DskipTests -f ./shenyu-examples/shenyu-examples-http/pom.xml ./mvnw -B clean install -DskipTests -f ./shenyu-client/pom.xml ./mvnw -B clean install -Pexample -DskipTests -f ./shenyu-examples/pom.xml ./mvnw -B clean install -Prelease -DskipTests -f ./shenyu-dist/pom.xml ./mvnw -B clean install -Pdocker -DskipTests -f ./shenyu-dist/pom.xml # 集成测试打包 ./mvnw -B clean install -Pit -DskipTests -f ./shenyu-integrated-test/shenyu-integrated-test-spring-cloud/pom.xml ./mvnw -B clean install -Pit -DskipTests -f .]]></description>
</item>
<item>
    <title>apache shenyu重构之AbstractShenyuPlugin</title>
    <link>https://847850277.github.io/posts/apache-shenyu/shenyu-refactor-abstractshenyuplugin/</link>
    <pubDate>Fri, 11 Nov 2022 16:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/apache-shenyu/shenyu-refactor-abstractshenyuplugin/</guid>
    <description><![CDATA[重构AbstractShenyuPlugin.execute()方法 原来的执行流程 initMatchCacheConfig(); String pluginName = named(); PluginData pluginData = BaseDataCache.getInstance().obtainPluginData(pluginName); if (Objects.nonNull(pluginData) &amp;&amp; pluginData.getEnabled()) { final String path = exchange.getRequest().getURI().getPath(); SelectorData selectorData = obtainSelectorDataCacheIfEnabled(exchange); if (Objects.isNull(selectorData)) { List&lt;SelectorData&gt; selectors = BaseDataCache.getInstance().obtainSelectorData(pluginName); if (CollectionUtils.isEmpty(selectors)) { return handleSelectorIfNull(pluginName, exchange, chain); } Pair&lt;Boolean, SelectorData&gt; matchSelectorData = matchSelector(exchange, selectors); selectorData = matchSelectorData.getRight(); if (Objects.isNull(selectorData)) { if (matchCacheConfig.getSelectorEnabled() &amp;&amp; matchSelectorData.getLeft()) { selectorData = new SelectorData(); selectorData.setPluginName(named()); cacheSelectorData(path, selectorData); } return handleSelectorIfNull(pluginName, exchange, chain); } else { if (matchCacheConfig.]]></description>
</item>
<item>
    <title>apache shenyu 介绍</title>
    <link>https://847850277.github.io/posts/apache-shenyu/shenyu-introduce/</link>
    <pubDate>Fri, 29 Apr 2022 16:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/apache-shenyu/shenyu-introduce/</guid>
    <description><![CDATA[shenyu是什么 是一个java实现的网关、高性能、跨语言的、响应式API网关。
架构图 模块说明 admin 管理后台和配置模块 bootstrap 程序的主入口 client 客户端模块，提供支持Spring MVC 、Dubbo 、Spring Cloud 快速访问 disruptor 基于disruptor的封装 register-center shenyu-client提供各种rpc接入注册中心的支持 common 框架的通用类 dist 构建项目 metrics prometheus（普罗米修斯）实现的 metrics plugin 插件集合 spin 定义的spi spring-boot-starter 支持 spring-boot-starter sync-data-center 提供 ZooKeeper，HTTP，WebSocket，Nacos 的方式同步数据 examples 示例模块 web 包括插件、请求路由和转发等核心处理包 ]]></description>
</item>
</channel>
</rss>
