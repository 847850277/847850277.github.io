<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>ZhengPengDe Blog</title>
        <link>https://847850277.github.io/</link>
        <description>This is my cool site</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 18 Aug 2023 13:56:30 &#43;0800</lastBuildDate>
            <atom:link href="https://847850277.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Reactor Pattern</title>
    <link>https://847850277.github.io/posts/pattern/reactor/</link>
    <pubDate>Fri, 18 Aug 2023 13:56:30 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://847850277.github.io/posts/pattern/reactor/</guid>
    <description><![CDATA[Intent 意图 The Reactor design pattern handles service requests that are delivered concurrently to an application by one or more clients. 反应器设计模式处理由一个或多个客户端并发传递到应用程序的服务请求, The application can register specific handlers for processing which are called by reactor on specific events. 应用程序可以注册用于处理的特定处理程序，这些处理程序由反应器在特定事件上调用 Dispatching of event handlers is performed by an initiation dispatcher, which manages the registered event handlers. 事件处理程序的分派由启动分派程序执行，该程序管理已注册的事件处理程序 Demultiplexing of service requests is performed by a synchronous event demultiplexer. 服务请求的解复用由同步事件解复用器执行 Class diagram 类图 Applicability 应用 Use Reactor pattern when 以下场景可以使用Reactor 模式]]></description>
</item>
<item>
    <title>Scalable in java 翻译</title>
    <link>https://847850277.github.io/posts/2023/scalable_in_java_translate/</link>
    <pubDate>Wed, 16 Aug 2023 09:27:36 &#43;0800</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/2023/scalable_in_java_translate/</guid>
    <description><![CDATA[目录 Scalable network services 可扩展的网络服务 Event-driven processing 事件驱动处理 Reactor pattern Reactor 模式 Basic version 基本版本 Multithreaded versions 多线程版本 Other variants 其他变体 Walkthrough of java.nio nonblocking IO APIs 预编排java.nio nonblocking IO APIs Network Services 网络服务 Web services, Distributed Objects, etc 网络服务,分布式对象，等等。 Most have same basic structure: 大多数都有以下的基本结构 Read request 读请求 Decode request 解码请求 Process service 处理服务 Encode reply 编码响应 Send reply 发送响应 But differ in nature and cost of each step 当然在实际应用中每一步的运行效率都是不同的，例如其中可能涉及到xml解析、文件传输、web页面的加载、计算服务等不同功能 XML parsing, File transfer, Web page generation, computational services, &hellip; Classic Service Designs 传统的服务设计 Each handler may be started in its own thread 在一般的网络服务当中都会为每一个连接的处理开启一个新的线程，我们可以看下大致的示意图： public class Test { private static Integer PORT = 8080; public static void main(String[] args) { Server server = new Server(); server.]]></description>
</item>
<item>
    <title>什么是metadata</title>
    <link>https://847850277.github.io/posts/2023/metadata/</link>
    <pubDate>Sat, 01 Jul 2023 09:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/2023/metadata/</guid>
    <description><![CDATA[什么是metadata,带例子 metadata is simply data about data,It means it is a description and context of the data. It helps to organize, find and understand data. Here are a few real world examples of metadata.
元数据是数据的数据,这意味着他是数据的描述和上下文。它帮助我们了解和认识数据。下面有一些真是的关于元数据的例子。
Typical metadata Those are some typical metadata elements:
Title and description, Tags and categories, Who created and when, Who last modified and when, Who can access or update. A photo Every time you take a photo with today&rsquo;s cameras a bunch of metadata is gathered and saved with it]]></description>
</item>
<item>
    <title>常用web记录</title>
    <link>https://847850277.github.io/posts/2023/web/</link>
    <pubDate>Mon, 19 Jun 2023 09:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/2023/web/</guid>
    <description><![CDATA[常用的网站记录 在线markdown
docker国内镜像加速
另一个maven仓库
java全栈知识体系
jdk版本-爪哇我话你知
代码随想录-算法
labuladong 的算法小抄
Data Structure Visualizations
股票自动交易助手
excalidraw
v2ex
免费图床
Redis命令集
在线搜索代码网站
在线搜索代码网站
Doug Lea&rsquo;s Home Page
编程之路]]></description>
</item>
<item>
    <title>apache shenyu的spi机制</title>
    <link>https://847850277.github.io/posts/apache-shenyu/shenyu-spi/</link>
    <pubDate>Fri, 16 Jun 2023 09:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/apache-shenyu/shenyu-spi/</guid>
    <description><![CDATA[什么是spi SPI就是Service Provider Interface,是一种动态的服务发现机制。 可以基于运行时动态的加载接口的实现类。通过(接口编程 + 策略模式 + 配置文件) 实现解耦和扩展。
应用 数据库驱动 基于该接口的实现有MySQL,PostgreSQL,SqlServer等。 SLF4J日志框架 Dubbo的SPI扩展 dubbo apache shenyu spring boot starter jdbc的应用 日志的应用 apache shenyu的spi应用 dubbo的spi应用 实现方式 市面上常见的SPI的实现方式有：
JDK的SPI实现 Dubbo的SPI实现、ShenYu的 SPI Spring的SPI实现 JDK的SPI实现流程为
在类路径的META-INF/services目录创建一个以接口全限定名称命名的文件（本质是一个properties）文件，例如命名为java.sql.Driver 该文件中可以指定具体的实现类，也就是每个实现类的全类型限定名为单独一行 例如 META-INF/services/java.sql.Driver # META-INF/services/java.sql.Driver文件内容 com.mysql.jdbc.Driver org.postgresql.Driver 最后通过java.util.ServiceLoader对该文件进行加载，实例化接口的对应实现类（这里隐含了一个约定，所有实现类必须提供无参构造函数,用来反射调用） 底层的实现涉及到类加载、双亲委派等内容，这里不展开。基于这种设计思路，很多主流框架实现了一套SPI扩展，例如Dubbo的SPI扩展模块，就是读取类路径 下META-INF/services/dubbo目录的文件内容进行类加载。ShenYu-SPI模块也是沿用类似的设计思路。
JDK SPI 的代码示例 接口定义 public interface Search { public List&lt;String&gt; searchDoc(String keyword); } 实现类 public class FileSearch implements Search{ @Override public List&lt;String&gt; searchDoc(String keyword) { System.out.println(&#34;文件搜索 &#34;+keyword); return null; } } public class DatabaseSearch implements Search{ @Override public List&lt;String&gt; searchDoc(String keyword) { System.]]></description>
</item>
<item>
    <title>dubbo是否有对文件上传下载导入导出的支持</title>
    <link>https://847850277.github.io/posts/dubbo/dubbo-upload/</link>
    <pubDate>Sat, 10 Jun 2023 09:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/dubbo/dubbo-upload/</guid>
    <description><![CDATA[dubbo是否有对文件上传下载导入导出的支持 项目当前架构： HTTP请求 -&gt; 网关SpringCloudGateway -&gt; 网关路由匹配 -&gt; 网关dubbo泛化调用 -&gt; dubbo服务 但与文件相关的操作，还是需要以Controller的形式暴露服务，因为涉及HttpServletResponse、ModelAndView、MultipartFile这些对象，如： @PostMapping(&#34;/upload&#34;) public Result uploadFile(@RequestParam(&#34;file&#34;) MultipartFile file) { ...... } **问题：**请问dubbo可支持文件类型的操作，向外暴露服务，从而去除掉controller ？ 对于大文件类型的操作，我们建议在首次接收到 MultipartFile 请求之后将文件存储到 HDFS 或者 OSS 等存储介质上，然后在后端传递的时候直接通过一个标识符传递。对于小文件，将 file 转换成 byte 数组传递就行。 这个想的有点大，dubbo专注于分布式式RPC框架，如果把MVC功能，或者消息堆积之类的功能都实现了，就不太好专注于RPC，想的大一些其实可以考虑一些子项目Dubbo-MVC, Dubbo-MQ ，Dubbo-Framework 😄 dubbo是否有对文件上传下载导入导出的支持]]></description>
</item>
<item>
    <title>apache shenyu 打包命令集</title>
    <link>https://847850277.github.io/posts/apache-shenyu/shenyu-maven-package/</link>
    <pubDate>Tue, 06 Jun 2023 16:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/apache-shenyu/shenyu-maven-package/</guid>
    <description><![CDATA[打包常用的命令 # example打包 ./mvnw -B clean install -Pexample -DskipTests -f ./shenyu-examples/shenyu-examples-springcloud/pom.xml ./mvnw -B clean install -Pexample -DskipTests -f ./shenyu-examples/shenyu-examples-dubbo/pom.xml ./mvnw -B clean install -Pexample -DskipTests -f ./shenyu-examples/shenyu-examples-http/pom.xml ./mvnw -B clean install -DskipTests -f ./shenyu-client/pom.xml ./mvnw -B clean install -Pexample -DskipTests -f ./shenyu-examples/pom.xml ./mvnw -B clean install -Prelease -DskipTests -f ./shenyu-dist/pom.xml ./mvnw -B clean install -Pdocker -DskipTests -f ./shenyu-dist/pom.xml # 集成测试打包 ./mvnw -B clean install -Pit -DskipTests -f ./shenyu-integrated-test/shenyu-integrated-test-spring-cloud/pom.xml ./mvnw -B clean install -Pit -DskipTests -f .]]></description>
</item>
<item>
    <title>我的第一篇博客</title>
    <link>https://847850277.github.io/posts/my-first/</link>
    <pubDate>Thu, 01 Jun 2023 09:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/my-first/</guid>
    <description><![CDATA[这里是Markdown 正文 hello world]]></description>
</item>
<item>
    <title>非正规集成&#43;压力测试</title>
    <link>https://847850277.github.io/posts/2023/renewal_integration_testing/</link>
    <pubDate>Thu, 01 Jun 2023 09:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/2023/renewal_integration_testing/</guid>
    <description><![CDATA[非正规集成测试和性能测试 6月份公司最重要的续费活动就要开始了,期间功能方面的改动不是特别大。但需要做性能测试和全部数据方面的验证。 基于以上(全部数据的验证、性能测试)目的，于是需要对接口进行性能测试。
1、工具调研 在工具调研方面，市面上常见的性能测试工具有以下。
JMeter Apache Bench TestNG LoadRunner 基于熟悉上手和对公司业务数据的了解程度，最后选择了TestNG。原因有:
编码方便，灵活 数据驱动方式还不错 灵活的设置线程数 基于TestNG可以很灵活的设计一样宽表来保存结果集。 最后设计的表结构如下 create table renewalintegrationtesting.t_2023_renewal_list ( id bigint auto_increment primary key, student_num varchar(128) null, student_id varchar(36) null, phone varchar(255) null, customer_id varchar(500) null, app_token varchar(255) null, authorization varchar(255) null, step1_url varchar(500) null comment &#39;步骤一的接口地址&#39;, step1_request text null, step1_response text null, step1_success tinyint default 0 not null comment &#39;步骤一执行结果0-不成功1-成功&#39;, step2_url varchar(500) null comment &#39;步骤二的接口地址&#39;, step2_request text null, step2_response text null, step2_success tinyint default 0 not null comment &#39;步骤二执行结果0-不成功1-成功&#39;, step3_url varchar(500) null comment &#39;步骤3的接口地址&#39;, step3_request text null, step3_response text null, step3_success tinyint default 0 not null comment &#39;步骤3执行结果0-不成功1-成功&#39;, step4_url varchar(500) null comment &#39;步骤4的接口地址&#39;, step4_request text null, step4_response text null, step4_success tinyint default 0 not null comment &#39;步骤4执行结果0-不成功1-成功&#39;, step5_url varchar(500) null comment &#39;步骤5的接口地址&#39;, step5_request text null, step5_response text null, step5_success tinyint default 0 not null comment &#39;步骤5执行结果0-不成功1-成功&#39;, step6_url varchar(500) null comment &#39;步骤6的接口地址&#39;, step6_request text null, step6_response text null, step6_success tinyint default 0 not null comment &#39;步骤6执行结果0-不成功1-成功&#39;, step7_url varchar(500) null comment &#39;步骤7的接口地址&#39;, step7_request text null, step7_response text null, step7_success tinyint default 0 not null comment &#39;步骤7执行结果0-不成功1-成功&#39;, step8_url varchar(500) null comment &#39;步骤8的接口地址&#39;, step8_request text null, step8_response text null, step8_success tinyint default 0 not null comment &#39;步骤8执行结果0-不成功1-成功&#39;, step9_url varchar(500) null comment &#39;步骤9的接口地址&#39;, step9_request text null, step9_response text null, step9_success tinyint default 0 not null comment &#39;步骤9执行结果0-不成功1-成功&#39;, step10_url varchar(500) null comment &#39;步骤10的接口地址&#39;, step10_request text null, step10_response text null, step10_success tinyint default 0 not null comment &#39;步骤10执行结果0-不成功1-成功&#39; ); 2、测试用例的编写 示例测试用例代码如查看订单列表]]></description>
</item>
<item>
    <title>redis使用分布式锁记</title>
    <link>https://847850277.github.io/posts/redis/redis-distributed-lock-use/</link>
    <pubDate>Sat, 27 Nov 2021 09:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/redis/redis-distributed-lock-use/</guid>
    <description><![CDATA[使用redis分布式锁记 背景介绍 在项目中使用封装的redis锁注解中，会出现异常信息。抛出拿分布式锁异常。
跟源码 其中lock对象为false的情况下会抛出Get redis lock failed的业务异常 @Around(&#34;redisLockPoint() &amp;&amp; @annotation(redisLock)&#34;) public Object around(ProceedingJoinPoint pjp, RedisLock redisLock) throws Throwable { String key = redisLock.key(); if (StringUtils.isBlank(key)) { Object[] args = pjp.getArgs(); if (redisLock.bindType().equals(RedisLock.BindType.DEFAULT)) { key = StringUtils.join(args); } else if (redisLock.bindType().equals(RedisLock.BindType.ARGS_INDEX)) { key = getArgsKey(redisLock, args); } else if (redisLock.bindType().equals(RedisLock.BindType.OBJECT_PROPERTIES)) { key = getObjectPropertiesKey(redisLock, args); } } Assert.hasText(key, &#34;key does not exist&#34;); String prefix = redisLock.prefix()+&#34;_&#34;; boolean lock = distributedRedisLock.lock(prefix + key, redisLock.]]></description>
</item>
</channel>
</rss>
