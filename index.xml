<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ZhengPengDe Blog</title>
    <link>https://847850277.github.io/</link>
    <description>Recent content on ZhengPengDe Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 18 Aug 2023 13:56:30 +0800</lastBuildDate><atom:link href="https://847850277.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reactor Pattern</title>
      <link>https://847850277.github.io/posts/pattern/reactor/</link>
      <pubDate>Fri, 18 Aug 2023 13:56:30 +0800</pubDate>
      
      <guid>https://847850277.github.io/posts/pattern/reactor/</guid>
      <description>Intent 意图 The Reactor design pattern handles service requests that are delivered concurrently to an application by one or more clients. 反应器设计模式处理由一个或多个客户端并发传递到应用程序的服务请求, The application can register specific handlers for processing which are called by reactor on specific events. 应用程序可以注册用于处理的特定处理程序，这些处理程序由反应器在特定事件上调用 Dispatching of event handlers is performed by an initiation dispatcher, which manages the registered event handlers. 事件处理程序的分派由启动分派程序执行，该程序管理已注册的事件处理程序 Demultiplexing of service requests is performed by a synchronous event demultiplexer. 服务请求的解复用由同步事件解复用器执行 Class diagram 类图 Applicability 应用 Use Reactor pattern when 以下场景可以使用Reactor 模式</description>
    </item>
    
    <item>
      <title>Scalable in java 翻译</title>
      <link>https://847850277.github.io/posts/2023/scalable_in_java_translate/</link>
      <pubDate>Wed, 16 Aug 2023 09:27:36 +0800</pubDate>
      
      <guid>https://847850277.github.io/posts/2023/scalable_in_java_translate/</guid>
      <description>目录 Scalable network services 可扩展的网络服务 Event-driven processing 事件驱动处理 Reactor pattern Reactor 模式 Basic version 基本版本 Multithreaded versions 多线程版本 Other variants 其他变体 Walkthrough of java.nio nonblocking IO APIs 预编排java.nio nonblocking IO APIs Network Services 网络服务 Web services, Distributed Objects, etc 网络服务,分布式对象，等等。 Most have same basic structure: 大多数都有以下的基本结构 Read request 读请求 Decode request 解码请求 Process service 处理服务 Encode reply 编码响应 Send reply 发送响应 But differ in nature and cost of each step 当然在实际应用中每一步的运行效率都是不同的，例如其中可能涉及到xml解析、文件传输、web页面的加载、计算服务等不同功能 XML parsing, File transfer, Web page generation, computational services, &amp;hellip; Classic Service Designs 传统的服务设计 Each handler may be started in its own thread 在一般的网络服务当中都会为每一个连接的处理开启一个新的线程，我们可以看下大致的示意图： public class Test { private static Integer PORT = 8080; public static void main(String[] args) { Server server = new Server(); server.</description>
    </item>
    
    <item>
      <title>什么是metadata</title>
      <link>https://847850277.github.io/posts/2023/metadata/</link>
      <pubDate>Sat, 01 Jul 2023 09:00:00 +0000</pubDate>
      
      <guid>https://847850277.github.io/posts/2023/metadata/</guid>
      <description>什么是metadata</description>
    </item>
    
    <item>
      <title>常用web记录</title>
      <link>https://847850277.github.io/posts/2023/web/</link>
      <pubDate>Mon, 19 Jun 2023 09:00:00 +0000</pubDate>
      
      <guid>https://847850277.github.io/posts/2023/web/</guid>
      <description>常用web记录</description>
    </item>
    
    <item>
      <title>apache shenyu的spi机制</title>
      <link>https://847850277.github.io/posts/apache-shenyu/shenyu-spi/</link>
      <pubDate>Fri, 16 Jun 2023 09:00:00 +0000</pubDate>
      
      <guid>https://847850277.github.io/posts/apache-shenyu/shenyu-spi/</guid>
      <description>apache shenyu的spi机制</description>
    </item>
    
    <item>
      <title>dubbo是否有对文件上传下载导入导出的支持</title>
      <link>https://847850277.github.io/posts/dubbo/dubbo-upload/</link>
      <pubDate>Sat, 10 Jun 2023 09:00:00 +0000</pubDate>
      
      <guid>https://847850277.github.io/posts/dubbo/dubbo-upload/</guid>
      <description>dubbo是否有对文件上传下载导入导出的支持</description>
    </item>
    
    <item>
      <title>apache shenyu 打包命令集</title>
      <link>https://847850277.github.io/posts/apache-shenyu/shenyu-maven-package/</link>
      <pubDate>Tue, 06 Jun 2023 16:00:00 +0000</pubDate>
      
      <guid>https://847850277.github.io/posts/apache-shenyu/shenyu-maven-package/</guid>
      <description>打包命令集</description>
    </item>
    
    <item>
      <title>我的第一篇博客</title>
      <link>https://847850277.github.io/posts/my-first/</link>
      <pubDate>Thu, 01 Jun 2023 09:00:00 +0000</pubDate>
      
      <guid>https://847850277.github.io/posts/my-first/</guid>
      <description>这是描述信息</description>
    </item>
    
    <item>
      <title>非正规集成&#43;压力测试</title>
      <link>https://847850277.github.io/posts/2023/renewal_integration_testing/</link>
      <pubDate>Thu, 01 Jun 2023 09:00:00 +0000</pubDate>
      
      <guid>https://847850277.github.io/posts/2023/renewal_integration_testing/</guid>
      <description>非正规集成&#43;压力测试</description>
    </item>
    
    <item>
      <title>redis使用分布式锁记</title>
      <link>https://847850277.github.io/posts/redis/redis-distributed-lock-use/</link>
      <pubDate>Sat, 27 Nov 2021 09:00:00 +0000</pubDate>
      
      <guid>https://847850277.github.io/posts/redis/redis-distributed-lock-use/</guid>
      <description>使用redis分布式锁记</description>
    </item>
    
    <item>
      <title>bug 记录</title>
      <link>https://847850277.github.io/posts/bug/bug/</link>
      <pubDate>Wed, 01 Jul 2015 09:00:00 +0000</pubDate>
      
      <guid>https://847850277.github.io/posts/bug/bug/</guid>
      <description>bug 记录</description>
    </item>
    
  </channel>
</rss>
