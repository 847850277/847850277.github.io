<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>ZhengPengDe Blog</title>
        <link>https://847850277.github.io/</link>
        <description>This is ZhengPengDe网络日志</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 01 Jun 2025 09:00:00 &#43;0000</lastBuildDate>
            <atom:link href="https://847850277.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Rust GUI</title>
    <link>https://847850277.github.io/posts/rust-gui/gpui/</link>
    <pubDate>Sun, 01 Jun 2025 09:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/rust-gui/gpui/</guid>
    <description><![CDATA[Rust GUI 使用 gpui Render 和 Render Once 的区别 Render：
持续渲染模式
组件会在每一帧都重新渲染 适用于需要频繁更新的动态内容 消耗更多资源，但能保持实时更新 Render Once：
一次性渲染模式
组件只在初始化或状态变化时渲染 适用于静态内容或不频繁更新的组件 性能更好，资源消耗更少 在 GPUI 中选择合适的渲染模式可以优化应用性能和用户体验。 Entity 是什么
Entity 是 GPUI 框架中的一个智能指针类型，类似于 React 中的引用机制。它用于管理 UI 组件的生命周期和状态。
Entity 的主要用法 1. 创建 Entity Entity 通过 cx.new() 方法创建，接受一个闭包来初始化组件：
pub fn view(window: &amp;mut Window, cx: &amp;mut App) -&gt; Entity&lt;Self&gt; { cx.new(|cx| Self::new(window, cx)) } 2. 在结构体中存储 Entity Entity 常被用作结构体字段，用于持有子组件的引用：
pub struct Example { root: Entity&lt;ButtonStory&gt;, } 3. 在构造函数中创建子组件 impl Example { pub fn new(window: &amp;mut Window, cx: &amp;mut Context&lt;Self&gt;) -&gt; Self { let root = ButtonStory::view(window, cx); Self { root } } 4.]]></description>
</item>
<item>
    <title>锈迹片段</title>
    <link>https://847850277.github.io/posts/rust-snippet/rust-snippet/</link>
    <pubDate>Mon, 04 Nov 2024 10:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/rust-snippet/rust-snippet/</guid>
    <description><![CDATA[Rust Snippet 锈迹片段 如何调试Rust过程属性宏的代码 通过println!(),可以打印出宏展开后的代码。
fn generate_handler(internal: bool, input: TokenStream) -&gt; Result&lt;TokenStream&gt; { let crate_name = utils::get_crate_name(internal); println!(&#34;crate_name: {:?}&#34;, crate_name); let item_fn = syn::parse::&lt;ItemFn&gt;(input)?; let (impl_generics, type_generics, where_clause) = item_fn.sig.generics.split_for_impl(); let vis = &amp;item_fn.vis; let docs = item_fn .attrs .iter() .filter(|attr| attr.path().is_ident(&#34;doc&#34;)) .cloned() .collect::&lt;Vec&lt;_&gt;&gt;(); let ident = &amp;item_fn.sig.ident; let call_await = if item_fn.sig.asyncness.is_some() { Some(quote::quote!(.await)) } else { None }; let def_struct = if !item_fn.sig.generics.params.is_empty() { let iter = item_fn .]]></description>
</item>
<item>
    <title>Rust实现Http Web Server</title>
    <link>https://847850277.github.io/posts/rust-http-server/mario-01/</link>
    <pubDate>Sun, 03 Nov 2024 10:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/rust-http-server/mario-01/</guid>
    <description><![CDATA[用Rust实现WebSerer的第一篇 最近业余时间一直在学习Rust,也在尝试用Rust去造轮子。第一个轮子就是用Rust去实现Web服务器。Web服务器的核心流程就是Request 和 Response。 简单的总结就是解析请求，然后匹配到Server初始化的路由处理器，然后路由处理器处理完返回。
同步版本的程序 启动TCP服务 解析处理请求 匹配路由 返回响应 示范代码如下 use sync_core::server::Server; use sync_core::service::Service; fn main() { //trace log tracing_subscriber::fmt::init(); let mut server = Server::new(Service::new()); let route = sync_core::route::Route::new(&#34;GET&#34;.to_string(), &#34;/hello&#34;.to_string(), || { &#34;Hello World&#34;.to_string() }); // hello world 2 return int value let route2 = sync_core::route::Route::new(&#34;GET&#34;.to_string(), &#34;/hello2&#34;.to_string(), || { //i32 value return 42.to_string() }); // push route to server server.service.routes.push(route); server.service.routes.push(route2); server.start(); } use crate::service::Service; use log::info; use std::io::{Read, Write}; use std::net::{TcpListener, TcpStream}; pub struct Server { pub service: Service, } impl Server { pub fn new(service: Service) -&gt; Self { Self { service } } pub fn start(&amp;self) { let addr = &#34;127.]]></description>
</item>
<item>
    <title>WEB网关系列02-基于http协议实现流量的代理</title>
    <link>https://847850277.github.io/posts/gateway/gateway-02-http-proxy/</link>
    <pubDate>Sun, 29 Oct 2023 09:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/gateway/gateway-02-http-proxy/</guid>
    <description><![CDATA[基于http协议实现流量的代理 模式之间差异 直连模式 代理模式 直连模式 直连模式，也就是服务与服务之间直接请求调用，比如说我们正常在浏览器上面输入baidu,然后浏览器把百度相应的响应反馈回来的过程。 这个过程种，用户充当了service-A的角色，百度的服务器充当了service-B的角色。
代码还原以上过程，利用java的Java.net.HttpURLConnection类实现网络访问 除了HttpURLConnection还有很多java封装的包也能实现网络访问 通过common封装好HttpClient； 通过 Apache 封装好CloseableHttpClient； 通过SpringBoot-RestTemplate； import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.net.HttpURLConnection; import java.net.URL; import java.nio.charset.StandardCharsets; public class DirectMode { public static void main(String[] args) { String api = &#34;https://www.baidu.com&#34;; HttpURLConnection connection = null; InputStream in = null; BufferedReader reader = null; try { //构造一个URL对象 URL url = new URL(api); //获取URLConnection对象 connection = (HttpURLConnection) url.openConnection(); //getOutputStream会隐含的进行connect(即：如同调用上面的connect()方法，所以在开发中不调用connect()也可以) in = connection.]]></description>
</item>
<item>
    <title>事件日志埋点</title>
    <link>https://847850277.github.io/posts/2023/event-log/</link>
    <pubDate>Thu, 19 Oct 2023 09:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/2023/event-log/</guid>
    <description><![CDATA[通过自定义注解和AOP实现自定义事件日志埋点 注解和aop类 注解 @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface EventLog { Action action() default Action.DEFAULT; boolean recordUserId() default true; boolean recordUserName() default true; boolean recordUserPhone() default true; boolean recordTime() default true; } aop @Slf4j @Aspect @Order(1) public class EventLogAspect { public EventLogAspect() { } @Pointcut(&#34;@annotation(com.xxxx.EventLog)&#34;) private void eventLogPoint() { } @Around(&#34;eventLogPoint() &amp;&amp; @annotation(eventLog)&#34;) public Object around(ProceedingJoinPoint pjp, EventLog eventLog) throws Throwable { Object[] args = pjp.getArgs(); if (args[0] instanceof Action.Param){ Action.Param param = (Action.]]></description>
</item>
<item>
    <title>WEB网关系列01-什么是WEB网关</title>
    <link>https://847850277.github.io/posts/gateway/gateway-01/</link>
    <pubDate>Tue, 10 Oct 2023 09:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/gateway/gateway-01/</guid>
    <description><![CDATA[WEB网关系列-什么是WEB网关 gateway，我们一般都称为网关。翻译意思有网关;(通往其他地区的)门户;方法;途径;出入口;手段;门道;大门口。
现实生活中的网关有比如，高速公路的收费口、城门入口、景区或者游乐园的入口等。它们都充当了入口的功能，还有检测功能等等。
而在web中的网关，它充当的是流量的入口，一般来说当有流量进入到web程序，它的第一层便是经过网关，然后经网关代理到准确的服务地址上， 同时，对应的服务产生响应，然后网关把响应反馈回去。那么网关就充当了，流量转发的角色， 个人觉得它是一个网关最核心的功能。
在流量转发这个场景下，可以衍生出无数种组合出来。因为，我们的web应用程序存在的方式是多种多样的，比如在线购物网站、wps、视频网站等等。当然市面上常用的就是基于http协议的web服务， 还有tcp、udp、websocket等。
除了流量转发，网关还需要限制恶意的请求过来，仅正确的用户、正确的请求才可以通过，也就是网关需要提供鉴权的功能。
网关还有就是限制请求流量的作用，举个例子来说，当一台计算机器它的瞬时处理能力只有1千个请求，那瞬时有2千个请求过来，网关处理不过来的话， 限流就在这种场景下面产生了。]]></description>
</item>
<item>
    <title>Reactor Pattern</title>
    <link>https://847850277.github.io/posts/pattern/reactor/</link>
    <pubDate>Fri, 18 Aug 2023 13:56:30 &#43;0800</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/pattern/reactor/</guid>
    <description><![CDATA[Intent 意图 The Reactor design pattern handles service requests that are delivered concurrently to an application by one or more clients. 反应器设计模式处理由一个或多个客户端并发传递到应用程序的服务请求, The application can register specific handlers for processing which are called by reactor on specific events. 应用程序可以注册用于处理的特定处理程序，这些处理程序由反应器在特定事件上调用 Dispatching of event handlers is performed by an initiation dispatcher, which manages the registered event handlers. 事件处理程序的分派由启动分派程序执行，该程序管理已注册的事件处理程序 Demultiplexing of service requests is performed by a synchronous event demultiplexer. 服务请求的解复用由同步事件解复用器执行 Class diagram 类图 Applicability 应用 Use Reactor pattern when 以下场景可以使用Reactor 模式]]></description>
</item>
<item>
    <title>Scalable in java 翻译</title>
    <link>https://847850277.github.io/posts/2023/scalable_in_java_translate/</link>
    <pubDate>Wed, 16 Aug 2023 09:27:36 &#43;0800</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/2023/scalable_in_java_translate/</guid>
    <description><![CDATA[目录 Scalable network services 可扩展的网络服务 Event-driven processing 事件驱动处理 Reactor pattern Reactor 模式 Basic version 基本版本 Multithreaded versions 多线程版本 Other variants 其他变体 Walkthrough of java.nio nonblocking IO APIs 预编排java.nio nonblocking IO APIs Network Services 网络服务 Web services, Distributed Objects, etc 网络服务,分布式对象，等等。 Most have same basic structure: 大多数都有以下的基本结构 Read request 读请求 Decode request 解码请求 Process service 处理服务 Encode reply 编码响应 Send reply 发送响应 But differ in nature and cost of each step 当然在实际应用中每一步的运行效率都是不同的，例如其中可能涉及到xml解析、文件传输、web页面的加载、计算服务等不同功能 XML parsing, File transfer, Web page generation, computational services, &hellip; Classic Service Designs 传统的服务设计 Each handler may be started in its own thread 在一般的网络服务当中都会为每一个连接的处理开启一个新的线程，我们可以看下大致的示意图： public class Test { private static Integer PORT = 8080; public static void main(String[] args) { Server server = new Server(); server.]]></description>
</item>
<item>
    <title>什么是metadata</title>
    <link>https://847850277.github.io/posts/2023/metadata/</link>
    <pubDate>Sat, 01 Jul 2023 09:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/2023/metadata/</guid>
    <description><![CDATA[什么是metadata,带例子 metadata is simply data about data,It means it is a description and context of the data. It helps to organize, find and understand data. Here are a few real world examples of metadata.
元数据是数据的数据,这意味着他是数据的描述和上下文。它帮助我们了解和认识数据。下面有一些真是的关于元数据的例子。
Typical metadata Those are some typical metadata elements:
Title and description, Tags and categories, Who created and when, Who last modified and when, Who can access or update. A photo Every time you take a photo with today&rsquo;s cameras a bunch of metadata is gathered and saved with it]]></description>
</item>
<item>
    <title>常用web记录</title>
    <link>https://847850277.github.io/posts/2023/web/</link>
    <pubDate>Mon, 19 Jun 2023 09:00:00 &#43;0000</pubDate>
    <author>zhengpengde</author>
    <guid>https://847850277.github.io/posts/2023/web/</guid>
    <description><![CDATA[常用的网站记录 在线markdown
docker国内镜像加速
另一个maven仓库
java全栈知识体系
jdk版本-爪哇我话你知
代码随想录-算法
labuladong 的算法小抄
Data Structure Visualizations
股票自动交易助手
excalidraw
v2ex
免费图床
Redis命令集
在线搜索代码网站
Doug Lea&rsquo;s Home Page
编程之路
ubuntu微信]]></description>
</item>
</channel>
</rss>
